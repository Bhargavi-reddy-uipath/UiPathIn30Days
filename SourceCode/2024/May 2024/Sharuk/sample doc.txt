What is UiPath? 

Robotic Process Automation (RPA) allows organizations to automate tasks just like a human does them across applications and systems.  

RPA robots can capture data, run applications, trigger responses, take decisions based on predefined rules and communicate with other systems.  

RPA primarily targets processes which are highly manual, repetitive, rule-based, with low exceptions rate and standard electronic readable input. 

What are components of UiPath?  

UiPath Orchestrator  

Orchestrator is a cloud based Ui Path management and storage drive  

Orchestrator manages the creation, monitoring, scheduling, and controlling of automated bots and processes.  

It manages Queues, triggers, Assets, Project etc.  

Orchestrator also functions as a repository for libraries, reusable components assets and processes used by robot or developer  

  

UiPath Studio  

Ui Path Studio helps you design automation workflows visually, quickly and with basic programming knowledge  

In Ui Path studio, automated processes are built in a visual way using the built-in recorder, drag & drop activities  

 Activities form into comprehensive workflows in Studio, which are then executed by the Robot and published to Orchestrator. 

 

UiPath Robots  

The Robot is UiPath’s execution agent that enables to run processes developed in Studio.  

It executes workflows/instructions sent either locally or through Orchestrator 

 

How Many Types of Bots do we have? 

Attended BOT  

 Attended BOT is triggered by user events and operates alongside a human on the same workstation. 

An attended bot will “attend to” or assist a human with a task and are activated by the user by the click of a button  

Help individual users with small and repetitive tasks 

 

Unattended BOT  

Unattended BOT operates on a present schedule, or as triggered by logic in the process flow.  

An Unattended BOT is not dependent on users to trigger processes as they are controlled through Orchestrator  

Helps in Running long processes or automations without the need of human interaction 

 

How many types of Layouts do we have in UiPath? 

There are three Layouts we have: 

Sequence: 

One of the most important activities in UiPath is that it connects several activities in a sequence. Each sequence acts as an individual container which can be named as per their function in the workflow for better understanding. 

It allows executing activities inside each sequence to run separately as well as for easy segregation for each task clarity. 
 
 
Flowchart:  

this activity allows an individual to contain various activities inside it; however, the pattern of executing each activity can be customized according to the requirement 

The user can connect each activity as their required flow of execution 

 

About Activities: 

 

What are Variables in UiPath? 

Variables are containers that can hold multiple data entries (values) of the same data type. 

. For Example, Email Address can be a variable that holds the values like ABC@Gmail.com,XYZ@outlook.com etc. one at a time execution. 

Variables help us to pass data to from one activity to another 

 

Most Used activities in UiPath 

Text/String Variable 

Number Variable 

Boolean Variable 

Array Variable 

Date and Time Variable 

Data Table Variable 

Generic Value Variable 

 

Text/String Variable 

We Use this Variable to store Text 

Sequence Task: Based on the input we should get the welcome message 

Step: 1 Add Input Dialog Box and give the input 

Step 2: Add Message box to display a message 

Cond: Should display a message based on input 

 

Number Variable 

We will Use this Variable to store the information 

Task: Take user input for Marks for two subjects and display a total mark 

Hint: we need to create three Variables here Sub+Sub. 

 

Boolean Variable FLOW CHART  

Flow chart: Used to create Complex and business process as it allows us to do multiple branching of logical operators  

Boolean Value stores the two values TRUE AND False. Whenever we have the condition in UiPath we will use this Boolean. 

 

Array: 

The array variable is a type of variable which enables you to store multiple values of the same type. 

array of numbers, one of strings, one of Boolean values and so on. 

We need to Access each element of Array through Index. 

 

Task: we are going to create an automation that asks the user for his first and last name and age, stores the information in an array and then writes it in a .txt file. 

Step 1: Take inputs for First Name, Last Name, Age create a variable for this. 

Step 2: Write into text file. 

 

Date and Time Variable 

The date and time variable are a type of variable that enables you to store information about any date and time 

Task: Assign Date and time to one variable and write in Excel. 

 

Data Table Variable 

Data Table variable represents a type of variable that can store big pieces of information and act as a database or a simple spreadsheet with rows and columns.     

In Data Tables individual cells can be identified by using the Column name or zero-based index and the row index.     

Data Column starts with index 0 and increment by 1 to the next column.    

Data Row Starts with index 0 and increment by 1 with next row.  

 

Generic Value Variable: 

 The Generic Value variable is a type of variable that can store any kind of data, including text, numbers, dates, and arrays, and is particular to UiPath Studio. 

Generic Value variables are automatically converted to other types to perform certain actions. However, it is important to use these types of variables carefully, as their conversion may not always be the correct one for your project. 

 

 

Control flow Statement –  

Control flow is the order in which activities are executed or evaluated in a software project. 

Control flow is enacted with two concepts - Sequence and Flowchart 

Activities and methods define the decisions to be made during a workflow. 

The most common control flow statements are If, While, Do While, For Each, Switch, and Parallel 

 

If Condition 

The Condition is verified with 2 potential outcomes – True or False 

The Then branch is the set of actions to be executed when the condition is True. 

The Else branch is the set of actions to be executed when the condition is False 

Based on the chosen type of layout, there are 2 corresponding activities that fulfill the  

If statement role:  

- The If activity in sequences.  

- The Flow Decision activity in flowcharts 

 

Loops: Do While   

Loops are repetitions of a set of operations based on a given condition.  

Control flow statement Loops are – Do While, While and For Each. 

Do While: Executes a specific sequence while a condition is met. 

The Project Exists the Loop when the specified condition is no Longer Met. 

 The condition is evaluated after each execution of the statements 

 

While Loop: It executes a specific sequence while a condition is met.  

The condition is evaluated before each execution of the statements.  

The key difference between Do While and While is that for Do While, the activities contained within it are executed at least once. 

 

Switch  

Executes a set of activities based on the value of a specific expression.  

Can be used in place of an If statement when we need at least 3 potential courses of action.  

This is done through the condition, which is not Boolean like in the case of If statement, but multiple. 

 

Data Table and Excel Automation  

What is Data Table?  

Data Table variable represents a type of variable that can store big pieces of information and act as a database or a simple spreadsheet with rows and columns.    

In Data Tables individual cells can be identified by using the Column name or zero-based index and the row index.    

Data Column starts with index 0 and increment by 1 to the next column.   

Data Row Starts with index 0 and increment by 1 with next row. 

 

Differences Between Excel and Workbook Activities Excel:    

To use “Excel Application Scope”, Excel should be Install on the system.  

To use Excel services even if Excel is not installed then you can use "Workbook related separate activities.  

And the other things are with Excel Activities you will not be able to access the chart and diagram related data with Excel Related activities, you will get an error.  

  

Workbook Activities:    

For Workbook Related Activity the Excel workbook file should be closed at the time of robot run otherwise it will give error like it is being used by other process.  

with Excel Application Scope not able to access the password protected excel and same case was with a pop was again asking to enter the credential  

 but with Workbook Activities it was working fine.  

All you need to do is read in a range then you can use this.  

 

Read Range Activity   
This activity gets the content of a worksheet (or a selection from that worksheet) and stores it in a Data Table variable, which can be created from the Properties panel using Ctrl + K.   

   

Read CSV Activity   
This activity captures the content of a CSV file and stores it in a Data Table variable. Although not commonly used anymore, there are still legacy or internal-built applications that work with this kind of documents   

 

Build Data Table Activity   
- By using this activity, choose the number of columns and the data type. Moreover, you can configure each column with specific options like allow null values, unique values, auto-increment (for numbers), default value and length (for strings).   
   
- In the Build Data Table activity click on Data Table to create a new Data Table.  

Add Data Row adds a new row to an existing Data Table variable. The input data can be of Data Row type or can be entered as an Array Row, by matching each object with the data type of each column.    

Filter Data Table allows filtering a Data Table through a Filter Wizard, using various conditions. This activity can be configured to create a new Data Table for the output of the activity or to keep the existing one and filter (delete) the entries that do not match the filtering conditions.  

1 Build Data Table with Column Names  

2 Add Assign activity and create a variable called data row  

Data Row – Dt1.newrow – We are creating a row to add the values  

Add Multiple Assign activity  

Data row(“Name”)  

Data row(“Contact”)  

Note: Should match exactly   

Now we have everything for row but needs to add this data-to-data table  

Ass Data Row Activity  

Add data row  

Give out put  

To print the result, we need to add the output Data Table Activity (it gives the data table result in the form of string)  

Give the output variable into message box  

  

  

Task: How to combine Excel Columns and write into next Column in UiPath?  

Enter all three Separate three columns into one column in the excel  

(CurrentRow("First Name").ToString + " " + CurrentRow("Middle Name").ToString + " " + CurrentRow("Last Name").ToString). Replace (" "," ")  

  

Table Extraction  

Table Extraction, part of the Modern Experience in Studio, enables you to use the UI Automation activities pack to automatically extract structured data from applications and save it as a Data Table object that can then be further used in your automation processes.  

This process can be done by using the Table Extraction Recorder in Studio, which can be accessed from the Ribbon if the UI Automation v21.4 or above pack is installed in your current project, and you have selected Modern Experience.  

  

Data Manipulation with Strings  

(158) UiPath VB.Net Date Format Specifiers - YouTube  

 


  

String.Concat   

Concatenates the string representations of two specified objects.   

Expression: STRING.CONCAT (VARNAME1, VARNAME2)   

String Contains Method   

Checks whether a specified substring occurs within a string. Returns TRUE OR FALSE.   

Expression: VARNAME.CONTAINS (“TEXT”)   

String. Format   

Converts the value of objects to strings (and inserts them into another text).   

Expression: STRING.FORMAT(“{0} IS {1}”, VARNAME1, VARNAME2)   

Index Of   

Returns the zero-based index of the first occurrence of a specified Unicode character or string within this instance.   

Expression: VARNAME1.INDEXOF(“A”)   

LastIndexOf   

Reports the zero-based index position of the last occurrence of a specified Unicode character or string within this instance.  

Expression: VARNAME1.LASTINDEXOF("AUTHOR")  

Substring. Length  

Var.substring(var.length) and  Var.substring(var. Length-3)  

String. Join   

Concatenates the elements in a collection and displays them as string.   

Expression: STRING.JOIN(“|”, COLLVARNAME1)   

Replace   

Replaces all the occurrences of a substring in a string.   

Expression: VARNAME.REPLACE (“ORIGINAL”, “REPLACED”)   

Split   

Splits a string into substrings using a given separator.   

Expression: VARNAME.SPLIT(“|“C)(INDEX)   

Substring   

Extracts a substring from a string using the starting index and the length.   

Expression: VARNAME1.SUBSTRING(STARTINDEX, LENGTH)  

  

 State Machine   

State Machine: State machine is one of the workflow types in UiPath that uses a finite number of states in the project.  

A container for using State Machine specific activities. Contains a Start Node that can be linked to the initial state of the State Machine.  

   

Task: Guess the Random Number  

   

These three logics will be applied to three possible states    

Guess Number > Random Number – IT SHOULD RETRY IF THE NUMBER IS NOT SAME  

Guess Number < Random Number- IT SHOULD RETRY IF THE NUMBER IS NOT SAME  

Guess Number = Random Number – This will be the final state  

   

State Machine  

State  

Final state  

   

State: we have three sections   

Entry – Activity which will execute while entering the state  

Exit – Activity to execute while exiting the state  

Transition – Enables to add conditions to jump from one state to another  

Final state – consists of entry option  

Specifies the action to occur when this state is transition to  

  

 PDF Automation  

A Portable Document Format (PDF) is a file format for capturing and sending electronic documents in exactly the intended format.    

PDF files play a huge role in everyday task(s) and they own significant parts of processes which are similar across industries.     

Creating or reading such files is a crucial part of PDF workflows across different market verticals which can be easily automated by using UiPath.   

   

Types of PDFs    

Generated PDF: PDFs whose content can be copied and pasted into other files directly.   

Scanned PDF: PDFs mostly in the form of Images whose content cannot be copied and pasted into other files.  

  

How to use PDF Automation  

Install the PDF packages from UiPath Studio   

Go to Manage packages a select Official select UiPath.PDF.Activities and install it.  

  

Read PDF Text:    

If you want to read “1-2”, or if you want to read in between “1-2, 7-8”, if you want to read one to end “4-End”  

Preserve Formatting: it will be in Boolean, and it will correct the formatting of PDF  

   

Write Text File:     

Read PDF with OCR    

: If PDF consist of Images, then text won’t read by the Read PDF text, or any document which is consists of Image also it will not allow u to read text . 

Properties:  Image Dpi: its displays pixel of the image – Default value is 150    

Ocr Engines: Default Engines are    

Google OCR (Optical Character Rigonization)  

Microsoft OCR (Take any OCR)  

 

If we are using Read with OCR we need to add more activity Microsoft OCR. Then Add an Output variable in property panel.  

  

Extract PDF Page Range Activity    

Create a PDF File from the Existing PDF file  

Properties:   

 File Name: Which file you want to work with  

Range: “2-3”  

   

Extract Images from PDF  

Extract PDF Images  

Properties: Create output Variable  

Image Extension: PNG  

   

How to export pdf pages as Images    

Manage PDF Password: Create a password for the PDF Documents  

If you already have password, give the older password  

Join PDF Files    

File list property: give the two files link in the form of string  

   

Get PDF Count:    

Use an Assign activity. 

In the To field, use pdfCount. 

In the Value field, use filteredFiles.Count. 

 

Introduction – Error & Exception Handling    

Error and Exception handling is a mechanism to detect, and handle run time errors so that normal flow of the application can be maintained.    

Error   

An error is an unknown issue that occurs at runtime and cannot be handled since we don’t know when it will come.   

 Mostly coding issues will cause these errors while development.    

Example - Syntax Error, User Error, Programming Error.    

Exceptions    

Exceptions are known issues that can be handled before running the project.   

This does not occur due to code issues. 

  

System and Business Exceptions  

 System Exception   

System Exception describes an error rooted in a technical issue, such as an application that is not responding.   
Example: a project which extracts phone numbers from an employee database, creating queue items for each of them. These items are then to be processed and inserted into a financial application. If, when the transaction is attempted, the financial application freezes, the Robot cannot find the field where it should insert the phone number, and eventually throws an error.   
These kinds of issues have a chance of being solved simply by retrying the transaction, as the application can unfreeze.   

 

Business Exception   

Errors rooted in the fact that certain pieces of data which the automation project depends on are incomplete, missing, outside of set boundaries (like trying to extract more from the ATM than its daily limit), or do not pass other data validation criteria.   

These exceptions need to be defined by developer using Throw activity and handled inside a try Catch.  

   
     

Throw and Rethrow Exception    

Throw   

To generate a user defined exception, we can use Throw Activity.    

By using Throw activity, you can apply all the business scenario validation in your code   

Rethrow   

Throws a previously thrown exception from within a Try Catch activity.   

The error is rethrown retaining the original source of the exception.   

Rethrow can only be used within a Catch block of a Try Catch activity  

 

Try Catch Exception  

Try Catch activity catches a specified exception type in a sequence or activity, and either displays an error notification or dismisses it and continues the execution.    
     

As a mechanism, Try Catch runs the activities in the Try block and, if an error takes place, executes the activities in the Catches block. The Finally block is only executed when no exceptions are thrown or when an exception is caught and handled in the Catches block (without being re-thrown).      

Simple Task:  Read excel or workbook, Keep excel file open    

Continue on error:   

Retry Scope    

The Retry Scope activity is used for catching and handling an error, which is why it’s like try Catch.   
The difference is that this activity simply retries the execution instead of providing a more complex handling mechanism.   
This activity has 2 main sections  

  

Email Automation   

Configure Gmail (Enable Imap & Allow less secure app)  

Get password Activity  

Get Imap mail Message  

For each loop and get the unread emails   

Uipath Supports several emails like   

 

Gmail -  

     
SMTP:   
Server:”Smtp.gmail.com”   
Port: 465   
1. Enable imap/pop3 in Gmail Settings   
2. https://myaccount.google.com/   
Switch on “Less secure app access”   
     
IMAP:   
Server: “imap.gmail.com   
Port: 993 

  

Type of Activities to send emails:  

Send Outlook Mail Message    

Send SMTP Mail Message   

Send IBM Notes Mail Message   

Send Exchange Mail Message   

Sending and receiving email using Outlook Activities   

Get Outlook Mail Messages   

Send Outlook Mail Messages   

Specify protocol (IMAP, POP, SMTP)   
- Get IMAP Mail Messages   
- Get POP Mail Messages   
- Send SMTP Mail Messages  

  

  

Send Outlook Mail Message :    

Body   

 Fill in the blank space with the body of the email you want to send.   

Subject   

Fill in the blank space with the subject of the email you want to send.   

Mail Message   

If you already have a Mail Message object you can forward that email without completing the subject and the body.   

Account   

Insert your email address. This is considered as the sender address.   

CC   

Insert here the addresses that you want to include in the 'Cc.' If you have more than one address type them separated by comma.  

  

  

Get Outlook Mail Message Properties :   

Send Outlook Mail Message   

Activity Name   

Activity Behavior   

Get Outlook Mail Messages   

Retrieve email messages from Outlook   

Move Outlook Mail Messages   

Moves Outlook email messages to the specified folder   

Send Outlook Mail Message   

Send an email message from Outlook   

Save Outlook Mail Message   

Saves your Outlook email messages in the specified folder   

Delete Outlook Mail Message   

Deletes an Outlook email message   

Reply to Outlook Mail Message   

Replies to an email message using Outlook   

Set Outlook Mail Categories   

Assigns categories to a specified mail message   

Mark Outlook Mail as Read / Unread   

Marks the specified mail message as read or unread  

  

Activity Name   

Activity Behavior   

Set Mail Categories   

Uses the Microsoft Graph Update message API to associate categories with a message   

Delete Mail   

Uses the Microsoft Graph Delete message API to delete an email message   

Get Mail   

Uses the Microsoft Graph Get message and List messages APIs to retrieve the matching messages from a specified mailbox   

Move Mail   

Uses the Microsoft Graph Move event message API to move a message to a different mail folder (Destination Folder)  

Forward Mail   

Uses the Microsoft Graph create forward and Forward event message API to forward a message with additional content to one or more recipients   

Send Mail   

Uses the Microsoft Graph Create message and send mail APIs to send a message to one or more recipients   

Delete Exchange Mail Message   

Deletes an Exchange email message  

Activity Name   

Activity Behavior   

Get Exchange Mail Message   

Retrieves an email message from Exchange   

Send Exchange Mail Message   

Sends an email message from Exchange   

Delete IBM notes Mail Message   

Deletes a specific email message from IBM notes   

Get IBM Notes Mail Message   

Retrieves mail messages from IBM Notes   

Move IBM Notes Mail Message   

Moves IBM Notes mail message to a specific folder   

Send IBM Notes Mail Message   

Sends a mail message by using IBM notes   

Get IMAP Mail Message   

Retrieves an IMAP email message from a specific server   

Move IMAP Mail Message   

Moves an IMAP email message to a specified folder   

Get POP3 Mail Message   

Retrieves a POP3 email message from a specified server   

Send SMTP Mail Message   

Sens an email message by using the SMTP protocol  

  

SMTP: Simple Mail transfer protocol   

Pop3:  post office protocol  

IMAP: Internet Message Access protocol  

Exchange:   

IBM: it works only with IBM note only  

 

Orchestrator:    

What is UiPath Orchestrator?  

UiPath Orchestrator is a web-based management console that orchestrates your UiPath automation activities. It's a centralized platform that allows you to deploy, schedule, manage, and monitor your robotic process automation (RPA) processes and robots.  

Here's a breakdown of its key features:  

1. Robot Management: Orchestrator enables you to manage your robots centrally. You can provision new robots, allocate them to specific environments, and control their access rights.  

2. Process Management: You can publish, deploy, and manage automation processes from a single interface. This includes versioning of processes, allowing you to easily update and manage different versions.  

  3. Scheduling: Orchestrator provides a scheduling feature that allows you to run processes at specific times or trigger them based on events.  

4. Monitoring and Logging: You can monitor the execution of your processes in real-time. Orchestrator provides detailed logs and analytics, allowing you to track the performance of your robots and processes.  

5. Queue Management: It offers a queue system to manage work items that need to be processed by robots. This allows for efficient handling of large volumes of data and tasks.  

6. Asset Management: Orchestrator provides a secure way to manage sensitive data such as credentials, connection strings, and configuration values used in your automation processes.  

7. Security and Access Control: It offers robust security features, including role-based access control, SSL encryption, and audit logs, ensuring the security of your automation environment.  

8. Integration and APIs: Orchestrator provides APIs and integration capabilities, allowing you to integrate it with other systems and tools, such as CRM software, ERP systems, or custom applications.  

9. High Availability and Scalability: Orchestrator is designed for high availability and scalability, allowing you to scale your automation infrastructure as your business grows. 

  

Why is UiPath Orchestrator required?  

UiPath Orchestrator is required for several reasons:  

1. Centralized Management: Orchestrator provides a centralized platform to manage your entire robotic process automation (RPA) infrastructure. This includes managing robots, processes, schedules, assets, and queues from a single interface.  

2. Robot Deployment and Provisioning: Orchestrator allows you to deploy robots to various machines in your organization. You can provision new robots easily and allocate them to specific environments.  

3. Process Automation: It enables you to publish, deploy, and manage automation processes. Orchestrator handles the scheduling and execution of processes, ensuring they run at the right time and on the appropriate resources.  

4. Monitoring and Analytics: Orchestrator provides real-time monitoring and detailed analytics of your automation processes. You can track the performance, status, and execution logs of your robots and processes, facilitating troubleshooting and optimization.  

5. **Scalability and Flexibility**: With Orchestrator, you can easily scale your automation infrastructure to accommodate the growing demands of your organization. You can add or remove robots, manage multiple environments, and handle large volumes of work items efficiently.  

6. Security and Compliance: Orchestrator offers robust security features to ensure the confidentiality, integrity, and availability of your automation assets and data. This includes role-based access control, encryption, and audit logs, helping you comply with regulatory requirements.  

7. Resource Optimization: Orchestrator optimizes the utilization of your resources by scheduling and prioritizing automation tasks. It ensures that the right process runs on the right robot at the right time, maximizing productivity and efficiency.  

8. Integration with Other Systems: Orchestrator provides APIs and integration capabilities, allowing you to integrate it with other systems and tools such as CRM, ERP, and ticketing systems. This enables end-to-end automation across your organization's IT landscape.  

9. Business Continuity and Disaster Recovery: Orchestrator ensures business continuity by providing high availability and disaster recovery capabilities. It minimizes downtime and data loss, ensuring your automation processes continue to operate smoothly even in the event of failures or disruptions. 

  

How to work on UiPath Orchestrator?  

Working with UiPath Orchestrator involves several key steps to effectively manage your automation processes and robots. Here's a general guide on how to work with UiPath Orchestrator: 

1. Access Orchestrator: You can access UiPath Orchestrator through a web browser. The URL will depend on whether you're using the cloud-based Orchestrator or an on-premises installation. Log in with your credentials.  

2. Navigate the Dashboard: Once logged in, you'll see the Orchestrator dashboard, which provides an overview of your automation environment, including robots, processes, queues, and logs.  

3. Manage Robots: 

    - Click on the Robots tab to manage your robots. 

    - Add robots by clicking the "+ Add" button and providing details such as the robot name, machine, and type. 

    - Edit or delete existing robots as needed.  

4. Manage Processes: 

    - Navigate to the Processes tab to manage your automation processes. 

    - Upload new processes by clicking the "+ Upload" button and selecting the process package (.nupkg file). 

    - Start, stop, edit, or delete existing processes.  

5. Schedule Processes: 

    - Go to the Jobs tab to schedule automation jobs. 

    - Click on the "Add" button to create a new job. 

    - Select the process you want to run, choose the robot(s), and set the schedule (e.g., trigger at specific times or intervals).  

6. Monitor Execution: 

    - Use the Jobs tab to monitor the execution of your automation jobs. 

    - View the status of jobs, logs, and details such as start time, end time, and duration. 

    - Troubleshoot issues by examining job logs and error messages.  

7. Manage Assets: 

    - Assets are used to store sensitive data such as credentials or configuration values. 

    - Navigate to the Assets tab to manage assets. 

    - Add new assets or update existing ones with values.  

8. Manage Queues: 

    - Queues are used to manage work items that need to be processed by robots. 

    - Go to the Queues tab to manage queues. 

    - Create new queues, add items to queues, and monitor queue processing.  

9. Security and Access: 

    - Configure security settings such as roles and permissions to control access to Orchestrator features. 

    - Ensure that only authorized users have access to sensitive data and functionalities.  

10. Integrate with Other Systems: 

    - Utilize Orchestrator APIs and integrations to connect with other systems and tools. 

    - Integrate Orchestrator with your CRM, ERP, or ticketing systems to automate end-to-end processes.  

11. Regular Maintenance: 

    - Perform regular maintenance tasks such as updating processes, managing robot licenses, and monitoring system health.  

12. Training and Support: 

    - Ensure that your team receives proper training on using Orchestrator. 

    - Seek support from UiPath community forums, documentation, or UiPath support resources when needed. 

    

   

Ui Path Orchestrator – Manage Projects & Robots     

Orchestrator is a cloud based Ui Path management and storage drive    

Orchestrator manages the creation, monitoring, scheduling, and controlling of automated bots and processes.    

It manages Queues, triggers, Assets, Project etc 
Orchestrator also functions as a repository for libraries, reusable components assets and processes used by robot or developer   

   

Ui Path Studio - Design Automation Project    

Ui Path Studio helps you design automation workflows visually, quickly and with basic programming knowledge     

In Ui Path studio, automated processes are built in a visual way using the built-in recorder, drag & drop activities     

 Activities form into comprehensive workflows in Studio, which are then executed by the Robot and published to Orchestrator.   

   

Ui Path Robots - Run Automation Project    

The Robot is UiPath’s execution agent that enables to run processes developed in Studio.     

It executes workflows/instructions sent either locally or through Orchestrator  

  

REFRAME WORK:    

Robotics Enterprise Framework in UiPath   

RE-Framework Architecture   

Configuration to create the RE-Framework   

Advantages of RE Framework   

Robotic Enterprise Framework: is a project template based on State Machines. It is created to fit the best practices regarding logging, exception handling, application initialization, and others being ready to tackle a complex business scenario.  

 

The Re-Framework has a main.xaml file which uses the state machine workflow. It is used for a better presentation of the process flow.  

Re-framework architecture has four states  

Init    

This is the Initial state used to read and store config data in a dictionary. It closes all the applications and opens the required application. If Init passes successfully, the robot moves to the next state.    

Get Transaction Data   

It is a data retrieval mechanism used to get the transaction from Queue, Data table, Database, Folder, etc. If it has a new transaction item, then it goes to the next state.    

Process Transaction   

It is used to Process the transactions fetch from, get from the previous state. If there are no records to process, then the robot moves to the end process state.    

End   

It ends the robot successfully and then closes all the application and kill the apps. 

   

Advantages of RE Framework   

1. Proper Exception Handling   

2. Recovery Abilities   

3. Effective Logging   

4. Reusability  

 

 

     